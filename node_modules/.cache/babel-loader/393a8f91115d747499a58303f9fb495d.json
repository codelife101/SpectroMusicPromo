{"ast":null,"code":"var _jsxFileName = \"/Users/WInaloto/Desktop/react-player/src/components/LibrarySong.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LibrarySong = ({\n  setSongs,\n  isPlaying,\n  song,\n  songs,\n  setCurrentSong,\n  id,\n  audioRef\n}) => {\n  const songSelectHandler = () => {\n    setCurrentSong(song); // add active state\n\n    const newSongs = songs.map(song => {\n      if (song.id === id) {\n        return { ...song,\n          active: true\n        };\n      } else {\n        return { ...song,\n          active: false\n        };\n      }\n    });\n    setSongs(newSongs); // check if the song is playing\n    // if (isPlaying){\n    //     const playPromise = audioRef.current.play();\n    //     if (playPromise !== undefined){\n    //         playPromise.then((audio) => {\n    //             audioRef.current.play();\n    //         });\n    //     }\n    // }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: songSelectHandler,\n    className: `library-song ${song.active ? 'selected' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      alt: song.name,\n      src: song.cover\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"song-description\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\" \", song.name, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: song.artist\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n\n_c = LibrarySong;\nexport default LibrarySong;\n\nvar _c;\n\n$RefreshReg$(_c, \"LibrarySong\");","map":{"version":3,"sources":["/Users/WInaloto/Desktop/react-player/src/components/LibrarySong.js"],"names":["React","LibrarySong","setSongs","isPlaying","song","songs","setCurrentSong","id","audioRef","songSelectHandler","newSongs","map","active","name","cover","artist"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAWC,EAAAA,SAAX;AAAsBC,EAAAA,IAAtB;AAA4BC,EAAAA,KAA5B;AAAmCC,EAAAA,cAAnC;AAAmDC,EAAAA,EAAnD;AAAuDC,EAAAA;AAAvD,CAAD,KAAsE;AAEtF,QAAMC,iBAAiB,GAAG,MAAM;AAC5BH,IAAAA,cAAc,CAACF,IAAD,CAAd,CAD4B,CAE5B;;AACA,UAAMM,QAAQ,GAAGL,KAAK,CAACM,GAAN,CAAWP,IAAD,IAAS;AAChC,UAAGA,IAAI,CAACG,EAAL,KAAYA,EAAf,EAAmB;AACf,eAAM,EACF,GAAGH,IADD;AAEFQ,UAAAA,MAAM,EAAE;AAFN,SAAN;AAIH,OALD,MAKO;AACH,eAAM,EACF,GAAGR,IADD;AAEFQ,UAAAA,MAAM,EAAC;AAFL,SAAN;AAIH;AACJ,KAZgB,CAAjB;AAaAV,IAAAA,QAAQ,CAACQ,QAAD,CAAR,CAhB4B,CAiB5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,GA1BD;;AA4BA,sBACI;AAAK,IAAA,OAAO,EAAED,iBAAd;AAAiC,IAAA,SAAS,EAAG,gBAAeL,IAAI,CAACQ,MAAL,GAAc,UAAd,GAA2B,EAAG,EAA1F;AAAA,4BACI;AAAK,MAAA,GAAG,EAAER,IAAI,CAACS,IAAf;AAAqB,MAAA,GAAG,EAAET,IAAI,CAACU;AAA/B;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,8BACI;AAAA,wBAAMV,IAAI,CAACS,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,kBAAKT,IAAI,CAACW;AAAV;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CAvCD;;KAAMd,W;AAyCN,eAAeA,WAAf","sourcesContent":["import React from 'react';\n\nconst LibrarySong = ({setSongs, isPlaying, song, songs, setCurrentSong, id, audioRef}) => {\n\n    const songSelectHandler = () => {\n        setCurrentSong(song);\n        // add active state\n        const newSongs = songs.map((song) =>{\n            if(song.id === id) {\n                return{\n                    ...song,\n                    active: true,\n                };\n            } else {\n                return{\n                    ...song,\n                    active:false,\n                };\n            }\n        });\n        setSongs(newSongs);\n        // check if the song is playing\n        // if (isPlaying){\n        //     const playPromise = audioRef.current.play();\n        //     if (playPromise !== undefined){\n        //         playPromise.then((audio) => {\n        //             audioRef.current.play();\n        //         });\n        //     }\n        // }\n    };\n\n    return(\n        <div onClick={songSelectHandler} className={`library-song ${song.active ? 'selected' : ''}`}>\n            <img alt={song.name} src={song.cover} />\n            <div className=\"song-description\">\n                <h3> {song.name} </h3>\n                <h4>{song.artist}</h4>\n            </div>\n        </div>\n    )\n}\n\nexport default LibrarySong;"]},"metadata":{},"sourceType":"module"}