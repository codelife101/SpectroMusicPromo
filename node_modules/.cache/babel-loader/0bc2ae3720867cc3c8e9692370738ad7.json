{"ast":null,"code":"var _jsxFileName = \"/Users/WInaloto/Desktop/react-player/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\"; // Import styless\n\nimport './styles/app.scss'; // Adding compontents\n\nimport Player from './components/Player';\nimport Song from './components/Song';\nimport Library from './components/Library';\nimport Nav from './components/Nav';\nimport data from './data';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // ref\n  const audioRef = useRef(null);\n  const [songs, setSongs] = useState(data);\n  const [currentSong, setCurrentSong] = useState(songs[0]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0,\n    animationPercentage: 0\n  });\n  const [libraryStatus, setLibraryStatus] = useState(false);\n\n  const timeUpdateHandler = e => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration; // calculate percentage\n\n    const roundedCurrent = Math.round(current);\n    const roundedDuration = Math.round(duration);\n    const animation = Math.round(roundedCurrent / roundedDuration * 100);\n    setSongInfo({ ...songInfo,\n      currentTime: current,\n      duration,\n      animationPercentage: animation\n    });\n  };\n\n  const songEndHandler = async () => {\n    let currentIndex = songs.findIndex(song => song.id === currentSong.id);\n    await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\n    if (isPlaying) audioRef.current.play();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Nav, {\n      libraryStatus: libraryStatus,\n      setLibraryStatus: setLibraryStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Song, {\n      currentSong: currentSong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Player, {\n      setSongs: setSongs,\n      setCurrentSong: setCurrentSong,\n      songs: songs,\n      songInfo: songInfo,\n      setSongInfo: setSongInfo,\n      audioRef: audioRef,\n      currentSong: currentSong,\n      isPlaying: isPlaying,\n      setIsPlaying: setIsPlaying\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Library, {\n      libraryStatus: libraryStatus,\n      setSongs: setSongs,\n      isPlaying: isPlaying,\n      audioRef: audioRef,\n      songs: songs,\n      setCurrentSong: setCurrentSong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      onTimeUpdate: timeUpdateHandler,\n      onLoadedMetadata: timeUpdateHandler,\n      ref: audioRef,\n      src: currentSong.audio,\n      onEnded: songEndHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"XTs9T7k3syio7Bkf0E79gWVfG/A=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/WInaloto/Desktop/react-player/src/App.js"],"names":["React","useState","useRef","Player","Song","Library","Nav","data","App","audioRef","songs","setSongs","currentSong","setCurrentSong","isPlaying","setIsPlaying","songInfo","setSongInfo","currentTime","duration","animationPercentage","libraryStatus","setLibraryStatus","timeUpdateHandler","e","current","target","roundedCurrent","Math","round","roundedDuration","animation","songEndHandler","currentIndex","findIndex","song","id","length","play","audio"],"mappings":"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","sourcesContent":["import React, {useState,useRef} from \"react\";\n// Import styless\nimport './styles/app.scss';\n// Adding compontents\nimport Player from './components/Player';\nimport Song from './components/Song';\nimport Library from './components/Library';\nimport Nav from './components/Nav'\n\nimport data from './data';\n\nfunction App() {\n// ref\n  const audioRef = useRef(null);\n  const [songs, setSongs] = useState(data);\nconst [currentSong, setCurrentSong] = useState(songs[0]);\nconst [isPlaying, setIsPlaying] = useState(false);\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0,\n    animationPercentage:0,\n});\nconst [libraryStatus, setLibraryStatus] = useState(false);\nconst timeUpdateHandler = (e) =>{\n    const current = e.target.currentTime;\n    const duration = e.target.duration;\n    // calculate percentage\n    const roundedCurrent = Math.round(current);\n    const roundedDuration = Math.round(duration);\n    const animation = Math.round((roundedCurrent / roundedDuration) * 100);\n    setSongInfo({\n      ...songInfo, \n      currentTime:current, \n      duration,\n      animationPercentage: animation,\n    });\n\n  };\n  const songEndHandler = async () => {\n    let currentIndex = songs.findIndex((song) => song.id === currentSong.id);\n    await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\n    if (isPlaying) audioRef.current.play();\n  }\n\n\n\n\n\n  return (\n    <div className=\"App\">\n      <Nav libraryStatus={libraryStatus} setLibraryStatus={setLibraryStatus} />\n      <Song currentSong={currentSong} />\n      <Player setSongs={setSongs} setCurrentSong={setCurrentSong} songs={songs} songInfo={songInfo} setSongInfo={setSongInfo} audioRef={audioRef} currentSong={currentSong} isPlaying={isPlaying} setIsPlaying={setIsPlaying} />\n      <Library libraryStatus={libraryStatus} setSongs={setSongs} isPlaying={isPlaying} audioRef={audioRef} songs={songs} setCurrentSong={setCurrentSong}/>\n      <audio \n        onTimeUpdate={timeUpdateHandler} \n        onLoadedMetadata={timeUpdateHandler} \n        ref={audioRef} \n        src={currentSong.audio}\n        onEnded={songEndHandler}\n      ></audio>\n    </div>\n    \n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}